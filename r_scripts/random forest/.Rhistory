#   j <- j+1; #increment j
#   #update theta
#   #set theta_new =  theta_previous - ( learning rate )* f'(theta_previous)
#   theta[j] <- theta[j-1] - alpha * deriv(theta[ j-1 ])
#
#   #test relative absolute change in target function
#   oldval <- newval #store f(theta_previous)
#   newval <- objfun(theta[j]) #calculate f(theta_new)
#   points(theta[j], newval, col = "red") #add new theta to plot
#   pause algorithm to give you time to see dot appear on plot
#   Sys.sleep(0.1)
#   #calculate relative change f(theta) from previous iteration to current iteration
#   rel_ch <- abs(  ( newval - oldval ) / oldval ) #use to test convergence
# }
#R version EXECUTED WITHOUT A PLOT (NON SLOW MOTION VERSION)
gdes <- function( theta0  , tol = 0.00000001, alpha = 0.01 )
{
newval <- objfun( theta0 ) #inital value of target function
rel_ch <- 1 #to store relative change in objective function
j <- 1 #iteration counter
theta <- c(theta0) #vector to store parameter
while( rel_ch > tol )
{
j <- j+1; #increment counter
theta[j] <- theta[j-1] - alpha * deriv(theta[ j-1 ])
#test relative absolute change in target function
oldval <- newval
newval <- objfun(theta[j])
rel_ch <- abs(  ( newval - oldval ) / oldval )
} #end of while
return( list( theta = theta[j], thetavec = theta, min_f = newval, niter = j ) )
} #end of gdes function
opt <- gdes(10)
opt$theta
opt$min_f
opt$niter
opt$thetavec
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
Rcpp::sourceCpp('cpp/assignment 2/gdes.cpp')
source('C:/Users/BIAGIONIR/R_projects/cpp/assignment 2/gdes.R')
source('C:/Users/BIAGIONIR/R_projects/cpp/assignment 2/gdes.R')
source('C:/Users/BIAGIONIR/R_projects/cpp/assignment 2/gdes.R')
library(Rcpp)
library(inline)
header="
double objfun(double theta){
return( 1 + 3 * ( pow(theta + 3, 2)) ) ;
}
"
header="
double deriv(double theta){
return( 6 * (theta + 3 ) ) ;
}
"
body_gdes <-'
double tol = 0.0000001 ;             // CONVERGENCE THRESHOLD
double alpha = 0.01 ;                // LEARNING RATE
vector<double> theta ;               // vector to store theta at each iteration
theta.push_back(theta0) ;
double rel_ch = 1.0 ;                // (arbitrary) init. val for relative change in objective function
double current_cost = objfun(theta0) ;      // inital value of f(theta)#
double previous_cost ;
int j = 1 ;                          // iteration counter
while (rel_ch > tol)
{
j += 1;
theta.push_back( theta.back()  - alpha * deriv(theta.back()) ) ;
// test relative absolute change in target function
previous_cost = current_cost ;
current_cost = objfun( theta.back() ) ;
rel_ch = abs( (current_cost - previous_cost) / previous_cost ) ;
if (  current_cost < previous_cost ){
alpha += alpha * 0.05 ;
}
else{
alpha -= alpha * 0.5 ;
}
}
return List::create(
_["theta"] = theta.back(),
_["thetavec"] = theta,
_["min_f"] = current_cost,
_["niter"] = j
) ;
'
gdesXX <- cxxfunction(signature(theta0 = "double"),
body = body_gdes,
plugin = "Rcpp",
verbose = TRUE)
theta0 <- 10.0
gdesXX( theta0 )
library(Rcpp)
library(inline)
header="
double objfun(double theta){
return( 1 + 3 * ( pow(theta + 3, 2)) ) ;
}
"
header="
double deriv(double theta){
return( 6 * (theta + 3 ) ) ;
}
"
body_gdes <-'
double tol = 0.0000001 ;             // CONVERGENCE THRESHOLD
double alpha = 0.01 ;                // LEARNING RATE
vector<double> theta ;               // vector to store theta at each iteration
theta.push_back(theta0) ;
double rel_ch = 1.0 ;                // (arbitrary) init. val for relative change in objective function
double current_cost = objfun(theta0) ;      // inital value of f(theta)#
double previous_cost ;
int j = 1 ;                          // iteration counter
while (rel_ch > tol)
{
j += 1;
theta.push_back( theta.back()  - alpha * deriv(theta.back()) ) ;
// test relative absolute change in target function
previous_cost = current_cost ;
current_cost = objfun( theta.back() ) ;
rel_ch = abs( (current_cost - previous_cost) / previous_cost ) ;
if (  current_cost < previous_cost ){
alpha += alpha * 0.05 ;
}
else{
alpha -= alpha * 0.5 ;
}
}
return List::create(
_["theta"] = theta.back(),
_["thetavec"] = theta,
_["min_f"] = current_cost,
_["niter"] = j
) ;
'
gdesXX <- cxxfunction(signature(theta0 = "float"),
body = body_gdes,
plugin = "Rcpp",
verbose = TRUE)
theta0 <- 10.0
gdesXX( theta0 )
library(tidyverse)
library(knitr) # opts_chunk
library(kableExtra)
opts_chunk$set(echo = FALSE,
include=TRUE,
message = FALSE,
warning = FALSE,
fig.align = "center",
fig.width = 5,
fig.pos = 'H',
as.is = TRUE)
theme_set(theme_bw())
# local({
#    load("all.rda")
#    ls()
# })
#attach("all.rda")
# PLOT THE FUNCTIONS (to be used for PDF doc)
objfun <- function(theta){
return(1 + 3*(theta + 3)^2 )
}
theta_seq <- seq(-20,15, len = 1000)
plot(theta_seq, objfun(theta_seq), type = "l",
ylab = "f(theta)", xlab = "theta")
points(10, objfun(10), col = "red")
# PLOT THE FUNCTIONS (to be used for PDF doc)
objfun <- function(theta){
return(1 + 3*(theta + 3)^2 )
}
theta_seq <- seq(-20,15, len = 1000)
plot(theta_seq,
objfun(theta_seq),
type = "l",
# ylab = "f(theta)",
xlab = "theta")
points(10, objfun(10), col = "red")
# PLOT THE FUNCTIONS (to be used for PDF doc)
objfun <- function(theta){
return(1 + 3*(theta + 3)^2 )
}
theta_seq <- seq(-20,15, len = 1000)
plot(theta_seq,
objfun(theta_seq),
type = "l",
ylab = "f(theta)",
xlab = "theta")
# points(10, objfun(10), col = "red")
# PLOT THE FUNCTIONS (to be used for PDF doc)
objfun <- function(theta){
return(1 + 3*(theta + 3)^2 )
}
theta_seq <- seq(-20,15, len = 1000)
p1 <- plot(theta_seq,
objfun(theta_seq),
type = "l",
ylab = "f(theta)",
xlab = "theta")
# points(10, objfun(10), col = "red")
p1
# PLOT THE FUNCTIONS (to be used for PDF doc)
objfun <- function(theta){
return(1 + 3*(theta + 3)^2 )
}
theta_seq <- seq(-20,15, len = 1000)
p1 <- plot(theta_seq,
objfun(theta_seq),
type = "l",
ylab = "f(theta)",
xlab = "theta")
# points(10, objfun(10), col = "red")
p1 ;
# PLOT THE FUNCTIONS (to be used for PDF doc)
objfun <- function(theta){
return(1 + 3*(theta + 3)^2 )
}
theta_seq <- seq(-20,15, len = 1000)
p1 <- plot(theta_seq,
objfun(theta_seq),
type = "l",
ylab = "f(theta)",
xlab = "theta")
# points(10, objfun(10), col = "red")
p1
objfun2 <- function(theta){
return( theta^4 - 3 * theta^3 + 2 )
}
theta_seq <- seq(-20,15, len = 1000)
p2 <- plot(theta_seq,
objfun2(theta_seq),
type = "l",
ylab = "f(theta)",
xlab = "theta")
# points(10, objfun(10), col = "red")
p2
# PLOT THE FUNCTIONS (to be used for PDF doc)
objfun <- function(theta){
return(1 + 3*(theta + 3)^2 )
}
theta_seq <- seq(-20,15, len = 1000)
p1 <- plot(theta_seq,
objfun(theta_seq),
type = "l",
ylab = "f(theta)",
xlab = "theta")
# points(10, objfun(10), col = "red")
p1
objfun2 <- function(theta){
return( theta^4 - 3 * theta^3 + 2 )
}
theta_seq <- seq(-20,15, len = 1000)
p2 <- plot(theta_seq,
objfun2(theta_seq),
type = "l",
ylab = "f(theta)",
xlab = "theta")
# points(10, objfun(10), col = "red")
p2
par(mar = c(4, 4, .1, .1))
# PLOT THE FUNCTIONS (to be used for PDF doc)
objfun <- function(theta){
return(1 + 3*(theta + 3)^2 )
}
theta_seq <- seq(-20,15, len = 1000)
plot(theta_seq,
objfun(theta_seq),
type = "l",
ylab = "f(theta)",
xlab = "theta")
# points(10, objfun(10), col = "red")
p1
objfun2 <- function(theta){
return( theta^4 - 3 * theta^3 + 2 )
}
theta_seq <- seq(-20,15, len = 1000)
plot(theta_seq,
objfun2(theta_seq),
type = "l",
ylab = "f(theta)",
xlab = "theta")
# points(10, objfun(10), col = "red")
p2
par(mar = c(4, 4, .1, .1))
# PLOT THE FUNCTIONS (to be used for PDF doc)
objfun <- function(theta){
return(1 + 3*(theta + 3)^2 )
}
theta_seq <- seq(-20,15, len = 1000)
plot(theta_seq,
objfun(theta_seq),
type = "l",
ylab = "f(theta)",
xlab = "theta")
# points(10, objfun(10), col = "red")
objfun2 <- function(theta){
return( theta^4 - 3 * theta^3 + 2 )
}
theta_seq <- seq(-20,15, len = 1000)
plot(theta_seq,
objfun2(theta_seq),
type = "l",
ylab = "f(theta)",
xlab = "theta")
# points(10, objfun(10), col = "red")
library(tidyverse)
library(knitr) # opts_chunk
library(kableExtra)
library(randomForest)
opts_chunk$set(echo = FALSE,
include=TRUE,
message = FALSE,
warning = FALSE,
fig.align = "center",
fig.width = 5,
fig.pos = 'H',
as.is = TRUE)
theme_set(theme_bw())
local({
load("all.rda")
ls()
})
attach("all.rda")
rm(list=ls())
library(tidyverse)
library(knitr) # opts_chunk
library(kableExtra)
# library(randomForest)
opts_chunk$set(echo = FALSE,
include=TRUE,
message = FALSE,
warning = FALSE,
fig.align = "center",
fig.width = 5,
fig.pos = 'H',
as.is = TRUE)
theme_set(theme_bw())
local({
load("all.rda")
ls()
})
attach("all.rda")
wins %>%
kable(format="latex", booktabs = T, caption = "Majority votes summary") %>%
kable_styling(c("bordered", "condensed"), full_width = F, font_size = 7,
latex_options = c("hold_position"))
sm %>%
kable(format="latex", booktabs = T, caption = "Summary statistics of the cross validation scores for the 100 replications") %>%
kable_styling(c("bordered", "condensed"), full_width = F, font_size = 7,
latex_options = c("hold_position"))
include_graphics("line_plot.png")
best_feature %>%
as.data.frame(.) %>%
slice(1:10) %>%
kable(format="latex", booktabs = T, linesep = "",
caption = "Example top 3 most important features") %>%
kable_styling(c("bordered", "condensed"), full_width = F, font_size = 7,
latex_options = c("hold_position")) #%>%
# footnote(general = "Variable importance decreasing from left to right.",
#          footnote_as_chunk = T)
library(tidyverse)
library(knitr) # opts_chunk
library(kableExtra)
opts_chunk$set(echo = FALSE,
include=TRUE,
message = FALSE,
warning = FALSE
# fig.align = "center",
# fig.width = 4,
# fig.pos = 'H'
# as.is = TRUE
)
theme_set(theme_bw())
local({
load("all.rda")
ls()
})
attach("all.rda")
install.packages("installr")
updateR()
library(installr)
updateR()
updateR()
source('C:/Users/BIAGIONIR/R_projects/cpp/assignment 2/fioles for SUBMISSION/19204876_assignment.R', echo=TRUE)
R --version
source('C:/Users/BIAGIONIR/R_projects/cpp/assignment 2/fioles for SUBMISSION/19204876_assignment.R', echo=TRUE)
source('C:/Users/BIAGIONIR/R_projects/cpp/assignment 2/fioles for SUBMISSION/19204876_assignment.R', echo=TRUE)
source('C:/Users/BIAGIONIR/R_projects/cpp/assignment 2/fioles for SUBMISSION/19204876_assignment.R', echo=TRUE)
Sys.which("make")
source('C:/Users/BIAGIONIR/R_projects/cpp/assignment 2/fioles for SUBMISSION/19204876_assignment.R', echo=TRUE)
source('C:/Users/BIAGIONIR/R_projects/cpp/assignment 2/fioles for SUBMISSION/19204876_assignment.R', echo=TRUE)
source('C:/Users/BIAGIONIR/R_projects/cpp/assignment 2/fioles for SUBMISSION/19204876_assignment.R', echo=TRUE)
tbl.task.3.2
installed. packages()
installed.packages()
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
library(tidyverse)
library(rio)
library(randomForest)
library(party)
options(digits=4, scipen=999)
# load data
data  <- import('../../local-data/output/titanic_train_clean.csv', setclass = "tibble")
cols <- c("Survived", "Pclass", "Sex", "FamilySize", "hasCabin", "isChild")
dat <- data %>%
mutate_at(cols, factor)
dat$PassengerId <- NULL # remove original
head(dat)
#################
# Model fitting #
#################
# init params and data structures
set.seed(1238)
N <- nrow(dat)
# randomly split original data
train_idx <- sample(1:N, size = 0.75*N)
test_idx <- setdiff(1:N, train_idx)
Xtr <- dat[train_idx, ]
Xte <- dat[test_idx, ] # exclude from k-fold cross validation
# init folds
N2 <- nrow(Xtr)
K <- 10
folds <- rep( 1:K, ceiling(N2/K) )
folds <- sample(folds)             # random permute
folds <- folds[1:N2]                # ensure we got N data points
acc <- matrix(NA, K, 1) # for each fold store accuracy pairs
best_feature_tmp <- matrix(NA, K, 3) # store k best features for current replication
# k-fold cross validation
for ( k in 1:K ) {
# split current replication training data into train/val
train_idx <- which(folds != k)
val_idx <- setdiff(1:N2, train_idx)
# fit random forests
fitrf <- randomForest(Survived ~ .,
data = Xtr,
subset = train_idx,
importance = T)
# validate random forests
predrf <- predict(fitrf,
type = "class",
newdata = Xtr[val_idx, ])
# compute accuracy and store result random forests
tabrf <- table(Xtr$Survived[val_idx], predrf)
acc[k, 1] <- sum(diag(tabrf))/sum(tabrf)
feat_imp_df <- importance(fitrf) %>%
data.frame() %>%
mutate(feature = row.names(.)) %>%
arrange(desc(MeanDecreaseAccuracy)) %>%
slice(1:3)
for (i in seq(1:3))
best_feature_tmp[k, i] <- feat_imp_df$feature[i]
} # END fold k
print(acc)
print(best_feature_tmp)
# avg k-folds
avg_k_folds <- apply(acc, 2, mean) # MARGIN=2, it works over columns
avg_k_folds <- c(`Random Forests` = avg_k_folds[1]) # add names
print(avg_k_folds)
# Predict X_te
predTestRf <- predict(fitrf,
type = "class",
newdata = Xte)
tabTestRf <- table(Xte$Survived, predTestRf)
accBest <- sum(diag(tabTestRf))/sum(tabTestRf)
accBest
fitrf
################
# Plot cforest #
################
pt <- prettytree(fitrf@ensemble[[1]], names(fitrf@data@get("input")))
nt <- new("BinaryTree")
nt@tree <- pt
nt@data <- fitrf@data
nt@responses <- fitrf@responses
plot(nt, type="simple")
#############################
# Apply to Titanic test set #
#############################
# load data
titanic_test_data  <- import('../local-data/output/titanic_test_clean.csv', setclass = "tibble")
cols <- c("Pclass", "Sex", "FamilySize", "hasCabin", "isChild")
T_te <- titanic_test_data %>%
mutate_at(cols, factor)
head(T_te)
T_te$Survived <- predTitanicTestRf <- predict(fitrf,
type = "class",
newdata = T_te[, -1])
submission <- T_te %>% select(PassengerId, Survived)
write.csv(submission, "../local-data/output/submission.csv", row.names = FALSE)
fitrf
T_te
# load data
titanic_test_data  <- import('../local-data/output/titanic_test_clean.csv', setclass = "tibble")
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load data
titanic_test_data  <- import('../local-data/output/titanic_test_clean.csv', setclass = "tibble")
